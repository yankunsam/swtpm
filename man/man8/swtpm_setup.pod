=head1 NAME

swtpm_setup

=head1 SYNOPSIS

B<swtpm_setup [OPTIONS]>

=head1 DESCRIPTION

B<swtpm_setup> is a tool that prepares the intial state for a libtpms-based
TPM.

The following options are supported:

=over 4

=item B<--runas <userid>>

Use this userid to run swtpm_setup.sh; by default 'tss' is used.

=item B<--config <file>>

Path to configuration file containing the tool to use for creating
certificates; see also B<swtpm_setup.conf>

=item B<--tpm-state <dir>> or B<--tpmstate <dir>>

Path to a directory where the TPM's state will be written into;
this is a mandatory argument

=item B<--tpm <path to executable>>

Path to the TPM executable; this is an optional argument and
by default the swtpm executable found in the PATH will be used.

=item B<--tpm2>

Do setup on a TPM 2; by default a TPM 1.2 is setup.

=item B<--createek>

Create the EK

=item B<--allow-signing>

Create an EK that can sign. This option requires --tpm2.

=item B<--ecc>

Create elliptic curve crypto (ECC) keys; by default RSA keys are generated.

=item B<--take-ownership>

Take ownership; this option implies --createek

=item B<--ownerpass  <password>>

Provide custom owner password; default is ooo

=item B<--owner-well-known>

Use a password of all zeros (20 bytes of zeros) as the owner password

=item B<--srkpass <password>>

Provide custom SRK password; default is sss

=item B<--srk-well-known>

Use a password of all zeros (20 bytes of zeros) as the SRK password

=item B<--create-ek-cert>

Create an EK certificate; this implies --createek
(NOT SUPPORTED YET)

=item B<--create-platform-cert>

Create a platform certificate; this implies --create-ek-cert

=item B<--lock-nvram>

Lock NVRAM access

=item B<--display>

At the end display as much info as possible about the configuration
of the TPM

=item B<--logfile <logfile>>

The logfile to log to. By default logging goes to stdout and stderr.

=item B<--keyfile <keyfile>>

The key file contains an ASCII hex key consisting of 32 hex digits with an
optional leading '0x'. This is the key to be used by the TPM emulator
for encrypting the state of the TPM. 

=item B<--pwdfile <passphrase file>>

The passpharse file contains a passphrase from which the TPM emulator
will derive the encyrption key from and use the key for encrypting the TPM
state.

=item B<--help, -h>

Display the help screen

=back

=head1 SEE ALSO

B<swtpm_setup.conf>

=head1 REPORTING BUGS

Report bugs to Stefan Berger <stefanb@linux.vnet.ibm.com>
